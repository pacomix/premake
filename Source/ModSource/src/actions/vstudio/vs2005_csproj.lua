--
-- vs2005_csproj.lua
-- Generate a Visual Studio 2005/2008 C# project.
-- Copyright (c) 2009-2010 Jason Perkins and the Premake project
--

--
-- Set up namespaces
--

	premake.vstudio.cs2005 = { }
	local vstudio = premake.vstudio
	local cs2005  = premake.vstudio.cs2005
  
  local vsversion = nil
  local toolversion = nil
  if _ACTION == "vs2005" then
    vsversion   = "8.0.50727"
    toolversion = nil
  elseif _ACTION == "vs2008" then
    vsversion   = "9.0.30729"    -- SP1
    toolversion = "3.5"
  elseif _ACTION == "vs2010" then
    vsversion   = "9.0.30729"    -- cut n paste error?
    toolversion = "4.0"
  elseif _ACTION == "vs2012" then
    vsversion   = "11.0.50522.1"  -- RC
    toolversion = "4.0" -- currrently 4.5.50501 in RC
  end


--
-- Figure out what elements a particular source code file need in its item
-- block, based on its build action and any related files in the project.
-- 
	
	local function getelements(prj, action, fname)
	
		if action == "Compile" and fname:endswith(".cs") then
			if fname:endswith(".Designer.cs") then
				-- is there a matching *.cs file?
				local basename = fname:sub(1, -13)
				local testname = path.getname(basename .. ".cs")
				if premake.findfile(prj, testname) then
					return "Dependency", testname
				end
				-- is there a matching *.resx file?
				testname = path.getname(basename .. ".resx")
				if premake.findfile(prj, testname) then
					return "AutoGen", testname
				end
			else
				-- is there a *.Designer.cs file?
				local basename = fname:sub(1, -4)
				local testname = path.getname(basename .. ".Designer.cs")
				if premake.findfile(prj, testname) then
					return "SubTypeForm"
				end
			end
		end

		if action == "EmbeddedResource" and fname:endswith(".resx") then
			-- is there a matching *.cs file?
			local basename = fname:sub(1, -6)
			local testname = path.getname(basename .. ".cs")
			if premake.findfile(prj, testname) then
				if premake.findfile(prj, basename .. ".Designer.cs") then
					return "DesignerType", testname
				else
					return "Dependency", testname
				end
			else
				-- is there a matching *.Designer.cs?
				testname = path.getname(basename .. ".Designer.cs")
				if premake.findfile(prj, testname) then
					return "AutoGenerated"
				end
			end
		end
				
		if action == "Content" then
			return "CopyNewest"
		end
		
		return "None"
	end


--
-- Write the opening <Project> element and project level <PropertyGroup> block.
--

	function cs2005.projectelement(prj)		
		if toolversion then
      if _ACTION == "vs2010" or _ACTION == "vs2012" then
        _p('<?xml version="1.0" encoding="utf-8"?>')
      end
			_p('<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="%s">', toolversion)
		else
			_p('<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">')
		end
	end

	function cs2005.projectsettings(prj)
		_p('  <PropertyGroup>')
    _p('    <ProjectType>Local</ProjectType>')  -- TODO Add support for ProjectType
    _p('    <ProductVersion>%s</ProductVersion>', vsversion)
		_p('    <SchemaVersion>2.0</SchemaVersion>')
		_p('    <ProjectGuid>{%s}</ProjectGuid>', prj.uuid)
    _p('    <Configuration Condition=" \'$(Configuration)\' == \'\' ">%s</Configuration>', premake.esc(prj.solution.configurations[1]))
		_p('    <Platform Condition=" \'$(Platform)\' == \'\' ">AnyCPU</Platform>')
    _p('    <AssemblyKeyContainerName>%s</AssemblyKeyContainerName>', '\r\n    ')  -- TODO Add support for AssemblyKeyContainerName
    _p('    <AssemblyName>%s</AssemblyName>', prj.buildtarget.basename)
    _p('    <AssemblyOriginatorKeyFile>%s</AssemblyOriginatorKeyFile>', '\r\n    ')  -- TODO Add support for AssemblyOriginatorKeyFile
    _p('    <DefaultClientScript>%s</DefaultClientScript>', '\r\n    ')  -- TODO Add support for DefaultClientScript
    _p('    <DefaultHTMLPageLayout>%s</DefaultHTMLPageLayout>', '\r\n    ')  -- TODO Add support for DefaultHTMLPageLayout
    _p('    <DefaultTargetSchema>%s</DefaultTargetSchema>', '\r\n    ')  -- TODO Add support for DefaultTargetSchema
    _p('    <DelaySign>%s</DelaySign>', '\r\n    ')  -- TODO Add support for DelaySign
		_p('    <OutputType>%s</OutputType>', premake.dotnet.getkind(prj))
		_p('    <AppDesignerFolder>Properties</AppDesignerFolder>')
		_p('    <RootNamespace>%s</RootNamespace>', prj.namespace or prj.buildtarget.basename)
    _p('    <RunPostBuildEvent>%s</RunPostBuildEvent>', 'OnBuildSuccess')  -- TODO Add support for RunPostBuildEvent
    _p('    <StartupObject>%s</StartupObject>', '\r\n    ')  -- TODO Add support for StartupObject
    _p('    <FileUpgradeFlags>%s</FileUpgradeFlags>', '\r\n    ')  -- TODO Add support for FileUpgradeFlags
    _p('    <UpgradeBackupLocation>%s</UpgradeBackupLocation>', '\r\n    ')  -- TODO Add support for UpgradeBackupLocation
    
    if prj.framework then
			_p('    <TargetFrameworkVersion>v%s</TargetFrameworkVersion>', prj.framework)
      if _ACTION == "vs2010" then
        _p('    <OldToolsVersion>3.5</OldToolsVersion>')
      end
		end
    
    if prj.icon then
      _p('    <ApplicationIcon>%s</ApplicationIcon>', iif(prj.icon == "", '\r\n    ', prj.icon))
    end
    
		_p('  </PropertyGroup>')
	end


--
-- The main function: write the project file.
--

	function premake.vs2005_csproj(prj)
		io.eol = "\r\n"

		cs2005.projectelement(prj)
    cs2005.projectsettings(prj)		

    buildableConfigs = premake.vstudio_buildProjectConfigurations(prj.projectPossibleBuildableConfigurations) -- Only create configs for the configurations that can be built and matches the solution.
    
    -- Config|Platform blocks
    printf('\tWritting configs:')
		for _, cfginfo in ipairs(buildableConfigs) do
      if cfginfo.isreal then
        local cfg = premake.getconfig(prj, cfginfo.src_buildcfg, cfginfo.src_platform)
        local VSPlatformName = nil
        
        if cfginfo.src_platform == "x32" then
          VSPlatformName = "x86"
        elseif cfginfo.src_platform == "x64" then
          VSPlatformName = "x64"
        elseif cfginfo.src_platform == "any" then
          VSPlatformName = "AnyCPU"
        else
          error ("Unsupported platform name specified as target: '" .. cfginfo.src_platform .. "'")
        end
        
        if VSPlatformName == nil then
          error ("Unsupported platform name specified as target: '" .. cfginfo.src_platform .. "'")
        else
          printf("\t\t'%s|%s'", cfginfo.src_buildcfg, VSPlatformName--[[cfginfo.src_platform--]])
        end
        
        --_p('  <PropertyGroup Condition=" \'$(Configuration)|$(Platform)\' == \'%s|AnyCPU\' ">', premake.esc(cfg.name))
        _p('  <PropertyGroup Condition=" \'$(Configuration)|$(Platform)\' == \'%s|%s\' ">', premake.esc(cfg.name), VSPlatformName)
        _p('    <DebugSymbols>true</DebugSymbols>', iif(cfg.flags.Symbols, 'true', '\n    '))
        _p('    <OutputPath>%s</OutputPath>', cfg.buildtarget.directory)
        _p('    <DefineConstants>%s</DefineConstants>', table.concat(premake.esc(cfg.defines), ";"))
        _p('    <BaseAddress>%s</BaseAddress>', '285212672')  -- TODO Add support for BaseAddress
        _p('    <TreatWarningsAsErrors>%s</TreatWarningsAsErrors>', iif(cfg.flags.FatalWarnings, 'true', '\r\n    '))
        _p('    <DebugType>%s</DebugType>', iif(cfg.flags.Symbols, 'full', 'pdbonly'))
        
        if cfg.flags.CSTargetAnyCPU then
          _p('    <PlatformTarget>AnyCPU</PlatformTarget>')
        else
          _p('    <PlatformTarget>%s</PlatformTarget>', VSPlatformName)
        end
        
        _p('    <Optimize>%s</Optimize>', iif(cfg.flags.Optimize or cfg.flags.OptimizeSize or cfg.flags.OptimizeSpeed, "true", "false"))
        
        if cfg.flags.CSGenerateDoc then
          _p('    <DocumentationFile>%s</DocumentationFile>', 'obj\\' .. prj.buildtarget.basename .. '.doc.xml')
        end
        _p('    <ErrorReport>prompt</ErrorReport>')
        _p('    <WarningLevel>4</WarningLevel>')
        if cfg.flags.Unsafe then
          _p('    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>')
        end
        _p('  </PropertyGroup>')
        
      end
    end

		
    _p('  <ItemGroup>')
		for _, linkname in ipairs(premake.getlinks(prj, "system", "basename")) do
			_p('    <Reference Include="%s">', premake.esc(linkname))
      _p('      <Name>%s</Name>', string.explode(premake.esc(linkname), ",")[1])
      _p('      <Private>False</Private>')
      _p('    </Reference>')
		end
		_p('  </ItemGroup>')

		_p('  <ItemGroup>')
		for fcfg in premake.eachfile(prj) do
			local action = premake.dotnet.getbuildaction(fcfg)
			local fname  = path.translate(premake.esc(fcfg.name), "\\")
			local elements, dependency = getelements(prj, action, fcfg.name)
			if elements == "None" then
				_p('    <%s Include="%s" />', action, fname)
			else
				_p('    <%s Include="%s">', action, fname)
				if elements == "AutoGen" then
					_p('      <AutoGen>True</AutoGen>')
				elseif elements == "AutoGenerated" then
					_p('      <SubType>Designer</SubType>')
					_p('      <Generator>ResXFileCodeGenerator</Generator>')
					_p('      <LastGenOutput>%s.Designer.cs</LastGenOutput>', premake.esc(path.getbasename(fcfg.name)))
				elseif elements == "SubTypeDesigner" then
					_p('      <SubType>Designer</SubType>')
				elseif elements == "SubTypeForm" then
					_p('      <SubType>Form</SubType>')
				elseif elements == "PreserveNewest" then
					_p('      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>')
				end
				if dependency then
					_p('      <DependentUpon>%s</DependentUpon>', path.translate(premake.esc(dependency), "\\"))
				end
				_p('    </%s>', action)
			end
		end
		_p('  </ItemGroup>')
    
    _p('  <ItemGroup>')
    if prj.flags and prj.flags.VSUseReferencesInProjects then
      local deps = premake.getreferences(prj)
			if #deps > 0 then
				for _, dep in ipairs(deps) do
          -- Build a relative path from the solution file to the project file
          local projpath = path.translate(path.getrelative(prj.location, _VS.projectfile(dep)), "\\")
          
          _p('    <ProjectReference Include="%s">', projpath)
          _p('      <Project>{%s}</Project>', dep.uuid)
          _p('      <Name>%s</Name>', dep.buildtarget.basename)
          _p('      <Private>False</Private>')
          _p('    </ProjectReference>')
          
				end
			end
    end
		_p('  </ItemGroup>')

		_p('  <Import Project="$(MSBuildBinPath)\\Microsoft.CSharp.targets" />')
		_p('  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.')
		_p('       Other similar extension points exist, see Microsoft.Common.targets.')
		_p('  <Target Name="BeforeBuild">')
		_p('  </Target>')
		_p('  <Target Name="AfterBuild">')
		_p('  </Target>')
		_p('  -->')

    _p('  <PropertyGroup>')    
      if #prj.prebuildcommands> 0 then
        _p('    <PreBuildEvent>')
        _p('%s', table.implode(prj.prebuildcommands, "", "", "\r\n"))
        _p(2,'</PreBuildEvent>')
      end
      if #prj.postbuildcommands> 0 then
        _p(2,'<PostBuildEvent>')
        _p(3,'%s', premake.esc(table.implode(prj.postbuildcommands, "", "", "\r\n")))
        _p(2,'</PostBuildEvent>')
      end
    _p('  </PropertyGroup>')
		_p('</Project>')
		
	end

